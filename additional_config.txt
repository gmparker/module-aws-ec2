#configure postgreSQL
sudo su - postgres
psql

CREATE USER kong WITH PASSWORD 'P@ssw0rd!'; 
CREATE DATABASE kong OWNER kong;

exit
exit

#copy kong.conf.default file
sudo cp /etc/kong/kong.conf.default /etc/kong/kong2.conf

#create kong.conf file
echo "admin_listen = *:8001 reuseport backlog=16384, *:8444 http2 ssl reuseport backlog=16384" | sudo tee -a /etc/kong/kong.conf
echo "database = postgres" | sudo tee -a /etc/kong/kong.conf
echo "pg_host = 127.0.0.1" | sudo tee -a /etc/kong/kong.conf
echo "pg_port = 5432" | sudo tee -a /etc/kong/kong.conf
echo "pg_timeout = 5000" | sudo tee -a /etc/kong/kong.conf
echo "pg_user = kong" | sudo tee -a /etc/kong/kong.conf
echo 'pg_password = P@ssw0rd!' | sudo tee -a /etc/kong/kong.conf
echo "pg_database = kong" | sudo tee -a /etc/kong/kong.conf

#copy conf file then rm
sudo cp /var/lib/pgsql/data/pg_hba.conf /var/lib/pgsql/data/pg_hba.conf.bak
sudo rm /var/lib/pgsql/data/pg_hba.conf

echo "local   all             postgres                                peer" | sudo tee -a /var/lib/pgsql/data/pg_hba.conf
echo "local   all             all                                     peer" | sudo tee -a /var/lib/pgsql/data/pg_hba.conf
echo "host    all             all             127.0.0.1/32            md5" | sudo tee -a /var/lib/pgsql/data/pg_hba.conf


#Restart postgresql
sudo systemctl restart postgresql

# Run kong migrations bootstrap
sudo /usr/local/bin/kong migrations bootstrap -c /etc/kong/kong.conf

# Start kong
sudo /usr/local/bin/kong start -c /etc/kong/kong.conf





sudo cd /home/kong

wget https://github.com/prabago/kong-plugin-jwt-auth-rbac/archive/refs/heads/master.zip
unzip master.zip

cd kong-plugin-jwt-auth-rbac-master

luarocks make kong-plugin-jwt-auth-rbac-0.1.0-1.rockspec --local

cd /home/ec2-user/.luarocks/share/lua/5.1/kong/plugins/jwt-auth-rbac

sudo nano handler.lua


#modify schema.lua file
sudo cp schema.lua schema.lua.bak
sudo rm schema.lua
sudo nano schema.lua



echo "lua-package-path = /home/ec2-user/.luarocks/share/lua/5.1/?.lua;;" | sudo tee -a /etc/kong/kong.conf
echo "plugins = bundled,jwt-auth-rbac" | sudo tee -a /etc/kong/kong.conf
--sudo nano /etc/kong/kong.conf


sudo /usr/local/bin/kong restart




#create service
curl -i -s -X POST http://localhost:8001/services \
  --data name=example_service \
  --data url='http://mockbin.org'

#create route
curl -i -X POST http://localhost:8001/services/example_service/routes \
  --data 'paths[]=/mock' \
  --data name=example_route


#create service
curl -i -s -X POST http://localhost:8001/services \
  --data name=swapi_service \
  --data url='http://swapi.dev/api/'


#create route
curl -i -X POST http://localhost:8001/services/swapi_service/routes \
  --data 'paths[]=/people' \
  --data name=swapi_people_route \
  --data strip_path=false


#create route
curl -i -X POST http://localhost:8001/services/swapi_service/routes \
  --data 'paths[]=/planets' \
  --data name=swapi_planets_route \
  --data strip_path=false

 #create route
curl -i -X POST http://localhost:8001/services/swapi_service/routes \
  --data 'paths[]=/films' \
  --data name=swapi_films_route \
  --data strip_path=false


  
#create service
curl -i -s -X POST http://localhost:8001/services \
  --data name=owen_wilson \
  --data url='https://owen-wilson-wow-api.onrender.com/wows'


#create route
curl -i -X POST http://localhost:8001/services/owen_wilson/routes \
  --data 'paths[]=/random' \
  --data name=owen_route \
  --data strip_path=false




#enable rate limiting 5 per minute on a single route
curl -X POST http://localhost:8001/routes/example_route/plugins \
  --data "name=rate-limiting"  \
    --data "config.minute=5" \
    --data "config.policy=local"


# test rate limiting
for _ in {1..11}; do curl -s -i http://localhost:8000/mock/request; echo; sleep 1; done



#configure proxy cache plugin
curl -X POST http://localhost:8001/services/owen_wilson/plugins \
    --data "name=proxy-cache"  \
    --data "config.response_code=200" \
    --data "config.request_method=GET" \
    --data "config.request_method=HEAD" \
    --data "config.content_type=application/json; charset=utf-8" \
    --data "config.cache_ttl=10" \
    --data "config.strategy=memory"

-- demo caching feature in Insomnia UI


#configure request termination for maintenance windows
curl -X POST http://localhost:8001/routes/swapi_people_route/plugins \
  --data "name=request-termination"  \
    --data "config.status_code=403" \
    --data "config.message=This service is termporarily down for maintenance" \
    --data "enabled=false"

curl -X PATCH  http://localhost:8001/routes/swapi_people_route/plugins \
  --data "name=request-termination"  \
     --data "enabled=true"


-- demo maintenance window (enable plugin, validate, disable plugin, validate)



#configure bot detection plugin globally
curl -X POST http://localhost:8001/plugins/ \
  --data "name=bot-detection" \
  --data "config.deny=swapi"

-- demo bot detection plugin
-- create User-Agent / swapi http header



#configure http-log / new relic integration
curl -X POST http://localhost:8001/plugins/ \
  --data "name=http-log"  \
    --data "config.http_endpoint=https://log-api.newrelic.com/log/v1?Api-Key=<INTENTIONALLY REMOVED>" \
    --data "config.method=POST" \
    --data "config.timeout=1000" \
    --data "config.keepalive=1000" \
    --data "config.flush_timeout=2" \
    --data "config.retry_count=15" \
    --data config.custom_fields_by_lua.team="return 'enterprise architecture'" \
    --data config.custom_fields_by_lua.source="return 'kong-poc'"

-- demo (generate some load and view the data in new relic)


#create key-auth plugin on a route
curl -X POST http://localhost:8001/routes/swapi_films_route/plugins \
  --data "name=key-auth"  \
    --data "config.key_names=apikey"

#create consumer and credential
curl -d "username=acme_trucking&custom_id=000001" http://localhost:8001/consumers/
curl -X POST http://localhost:8001/consumers/acme_trucking/key-auth

-- apikey  from above step to create credential
-- demo add apikey and value as a header in Insomnia
--0son09VLSca3i56at6ruUqEafNyfU0Rq



#enable jwt on films route
curl -X POST http://localhost:8001/routes/swapi_films_route/plugins \
  --data "name=jwt" 

curl -d "username=acme_waste&custom_id=000002" http://localhost:8001/consumers/
curl -X POST http://localhost:8001/consumers/acme_waste/jwt -H "Content-Type: application/x-www-form-urlencoded"


http://mykong.me:8001/consumers/acme_waste/jwt

{
	"data": [
		{
			"id": "c9d2d611-358c-47d4-8410-f35d654e4514",
			"consumer": {
				"id": "1a43c99d-e8e9-40a6-92ee-28b9c97c3460"
			},
			"algorithm": "HS256",
			"rsa_public_key": null,
			"key": "4QzErqaAGlDzwBY2fpFIOs2By9xupDL1",
			"secret": "9qmJRNeMHUUHONVK1b6VZzT3dUrgdUE8",
			"created_at": 1675693746,
			"tags": null
		}
	],
	"next": null
}


-- iss - key, secret key, add exp epoch format
-- "exp" : 1699999999




#create jwt-auth-rbac plugin
curl -X POST http://localhost:8001/plugins \
    --data 'name=jwt-auth-rbac' \
    --data 'config.roles_claim_name=groups' \
    --data 'config.roles=admin' \
    --data 'config.msg_error_any=You do not have the necessary role to use this service' \
    --data 'config.msg_error_all=You do not have the necessary role to use this service' \
    --data 'config.msg_error_not_roles_claimed=You do not have the necessary role to use this service' \
    --data 'config.policy=all'





#create consumer credential
curl -d "username=acme_swift&custom_id=000003" http://localhost:8001/consumers/
curl -X POST http://localhost:8001/consumers/acme_swift/jwt -H "Content-Type: application/x-www-form-urlencoded"

{
	"data": [
		{
			"algorithm": "HS256",
			"key": "UWnJwuhOSfZuHZArY0qjyWLB462tMAE0",
			"consumer": {
				"id": "cb063dbd-261c-486e-941f-2fe54eb27a7b"
			},
			"secret": "BcO5gtGkbDd4nxxiOAEnr71sYrpKwOFq",
			"rsa_public_key": null,
			"created_at": 1675445193,
			"tags": null,
			"id": "7fab7677-04b0-4ee6-bb33-d256727df4a5"
		}
	],
	"next": null
}



# create private and public keys
openssl genrsa -out private.pem 2048
openssl rsa -in private.pem -outform PEM -pubout -out public.pem



# create consumer and credential for JWT creation
curl -d "username=acme_supply&custom_id=000003" http://localhost:8001/consumers/
curl -X POST http://localhost:8001/consumers/acme_supply/jwt \
-F "algorithm=RS256" \
-F "rsa_public_key=@/home/ec2-user/public.pem"

#Validate credential is set to RS256, if not, correct it accordingly

# Return credential details just created
curl -X GET http://localhost:8001/consumers/acme_supply/jwt
